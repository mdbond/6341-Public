BUILDING AND RUNNING

To get started, download and extract JFlex and CUP, and
set two environment variables to your locations of JFlex and CUP. For example:

  export JFLEX_DIR=$HOME/jflex-1.7.0
  export CUP_DIR=$HOME/cup

The simplest option is to just download and extract the same versions I'm using:
JFlex 1.7.0 (https://jflex.de/release/jflex-1.7.0.tar.gz) and
CUP 0.11b-20160615 (http://www2.cs.tum.edu/projects/cup/releases/java-cup-bin-11b-20160615.tar.gz).

To build the lexer, parser, and interpreter:

  make

To run the interpreter:

  ./quandary [OPTIONS] QUANDARY_PROGRAM INTEGER_ARG_TO_MAIN

Run without any arguments to see supported options.

If you have any questions or problems with the skeleton or the reference implementation,
first see 6341-Public/quandary/TROUBLESHOOTING. If you can't figure out the issue,
make a public Piazza post. You're probably not the only person with the same question or issue,
and/or you may have found a ($20) bug in the reference implementation.

When working on your interpreter this semester, make sure that you don't make your modified interpreter
a public project on GitHub (or publicly available in any other way).
That's a violation of academic integrity. And of course don't share or show your interpreter source code to anyone either.
If you want to use GitHub to make a private project, note that (as a student) you can get a free upgrade to a GitHub account
that allows private projects: https://education.github.com/discount_requests/new

MISCELLANEOUS

Don't modify files that are generated automatically by JFlex or CUP. To see which files aren't
generated automatically, run "make clean" to eliminate generated files.

SUBMITTING A PROJECT

Use the following command to prepare a submission for upload to Carmen:

  make submission

PORTING TO C/C++

Although the skeleton is written in Java, in theory you can port it to C/C++ and implement your interpreter in C/C++.

The JFlex manual (https://jflex.de/manual.html; "Porting from lex/flex") says that
the input file (Scanner.jflex) is similar in format to the format expected by the C/C++ flex tool.

Likewise, Java CUP is based on the C/C++ tool YACC, and they use similar input file formats (Parser.cup).

So you can probably port the Scanner.jflex file to flex, and the Parser.cup file to YACC, as part of porting the Java code to C/C++.

However, Java is strongly recommended, especially if you want to use C++ because you're not (as) comfortable with Java.
Learning Java isn't hard for a C++ programmer, and it might actually take you no more time
than converting the skeleton to C++ -- and then you'll know a new language!
